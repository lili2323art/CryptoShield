import { ConnectButton } from "@rainbow-me/rainbowkit";
import type { NextPage } from "next";
import Head from "next/head";
import styles from "../styles/Home.module.css";
import nftabis from "../abis/nft.json";
import {
  Card,
  CardContent,
  CardDescription,
  CardFooter,
  CardHeader,
  CardTitle,
} from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import {
  Carousel,
  CarouselContent,
  CarouselItem,
  CarouselNext,
  CarouselPrevious,
} from "@/components/ui/carousel";
import Image from "next/image";
import { useWriteContract, useWaitForTransactionReceipt } from "wagmi";
import { parseEther } from "viem";
import { useState } from "react";

// ÂÅáËÆæËøôÊòØÊÇ®ÁöÑ NFT ÂêàÁ∫¶ ABI ÂíåÂú∞ÂùÄ
const NFT_CONTRACT_ABI = nftabis;
const NFT_CONTRACT_ADDRESS = "0x207e1a15a1Ad9616cB326C5bBfcEc79d3a6D961B";

const MintNFT: React.FC = () => {
  const [error, setError] = useState<string | null>(null);

  const {
    data: hash,
    error: writeError,
    isPending,
    writeContractAsync,
  } = useWriteContract();

  const { isLoading: isConfirming, isSuccess: isConfirmed } =
    useWaitForTransactionReceipt({
      hash,
    });

  const handleMint = async () => {
    await writeContractAsync({
      abi: NFT_CONTRACT_ABI,
      address: NFT_CONTRACT_ADDRESS,
      functionName: "mint",
    });
  };

  return (
    <Card className="w-[350px]">
      <CardHeader>
        <CardTitle>Mint Your NFT</CardTitle>
        <CardDescription>Get your unique NFT now!</CardDescription>
      </CardHeader>
      <CardContent>
        <Carousel>
          <CarouselContent>
            {[1, 2, 3].map((id) => (
              <CarouselItem key={id}>
                <Image
                  src={`/nft-preview-${id}.jpg`}
                  alt={`NFT Preview ${id}`}
                  width={300}
                  height={300}
                />
              </CarouselItem>
            ))}
          </CarouselContent>
          <CarouselPrevious />
          <CarouselNext />
        </Carousel>
      </CardContent>
      <CardFooter>
        <Button onClick={handleMint} disabled={isPending || isConfirming}>
          {isPending
            ? "Confirming..."
            : isConfirming
            ? "Minting..."
            : "Mint NFT"}
        </Button>
      </CardFooter>
      {hash && <div>Transaction Hash: {hash}</div>}
      {isConfirming && <div>Waiting for confirmation...</div>}
      {isConfirmed && <div>NFT minted successfully!</div>}
      {(error || writeError) && (
        <div>Error: {error || (writeError as Error)?.message}</div>
      )}
    </Card>
  );
};

const Home: NextPage = () => {
  return (
    <div className={styles.container}>
      <Head>
        <title>RainbowKit App</title>
        <meta
          content="Generated by @rainbow-me/create-rainbowkit"
          name="description"
        />
        <link href="/favicon.ico" rel="icon" />
      </Head>

      <header className={styles.header}>
        <div className={styles.logoTitle}>
          <h1 className={styles.title}>NFT Mint</h1>
        </div>
        <ConnectButton />
      </header>

      <main className={styles.main}>
        <MintNFT />
      </main>

      <footer className={styles.footer}>
        <a href="https://rainbow.me" rel="noopener noreferrer" target="_blank">
          Made with ‚ù§Ô∏è by your frens at üåà
        </a>
      </footer>
    </div>
  );
};

export default Home;
